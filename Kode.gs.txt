function doGet(e) {
  const spreadsheetId = "_ID SPREADSHEET_";
  const sheetSetting = "SETTING";
  const sheetPetugas = "DATA PETUGAS";
  const sheetPelanggan = "DATA PELANGGAN";
  const sheetPembayaran = "DATA PEMBAYARAN";
  const mode = e.parameter.mode;
  let result = {};

  if (mode === "load") {
    result = getSheetData(spreadsheetId, sheetSetting, 1);
  } else if (mode === "petugas") {
    result = getSheetData(spreadsheetId, sheetPetugas, 3);
  } else if (mode === "pelanggan") {
    result = getSheetData(spreadsheetId, sheetPelanggan, 5);
  } else if (mode === "pembayaran") {
    result = getSheetData(spreadsheetId, sheetPembayaran, 5);
  } else if (mode === "loginpetugas") {
    result = getSelectedColumns(spreadsheetId, sheetPetugas, 3, [2, 7]);
  } else if (mode === "loginpetugasok") {
    const user = e.parameter.user;
    const pass = e.parameter.pass;
    const baris = e.parameter.baris;
    result = verifyLogin(spreadsheetId, sheetPetugas, user, pass, baris, 2, 8);
  } else if (mode === "loginpelanggan") {
    result = getSelectedColumns(spreadsheetId, sheetPelanggan, 5, [2, 20]);
  } else if (mode === "loginpelangganok") {
    const user = e.parameter.user;
    const pass = e.parameter.pass;
    const baris = e.parameter.baris;
    result = verifyLogin(spreadsheetId, sheetPelanggan, user, pass, baris, 2, 21);
  } else if (mode === "tulismeteran") {
    const meteran = e.parameter.meteran;
    const bulan = e.parameter.bulan;
    const user = e.parameter.user;
    const baris = e.parameter.baris;
    result = writeMeteran(spreadsheetId, sheetPelanggan, meteran, bulan, user, baris);
  } else if (mode === "tulispembayaran") {
    const user = e.parameter.user;
    const bulan = e.parameter.bulan;
    const tanggal = e.parameter.tanggal;
    const nominal = e.parameter.nominal;
    const baris = e.parameter.baris;
    result = writePembayaran(spreadsheetId, sheetPembayaran, user, bulan, tanggal, nominal, baris);
  } else{
    result = { error: "Invalid mode parameter" };
  }

  return ContentService.createTextOutput(JSON.stringify(result)).setMimeType(ContentService.MimeType.JSON);
}

function getSheetData(spreadsheetId, sheetName, headerRow) {
  const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
  if (!sheet) return { error: `Sheet ${sheetName} not found` };

  const lastRow = sheet.getLastRow();
  const lastColumn = sheet.getLastColumn();

  // Ambil header
  const headers = sheet.getRange(headerRow, 1, 1, lastColumn).getValues()[0];

  // Ambil data setelah header
  const data = sheet.getRange(headerRow + 1, 1, lastRow - headerRow, lastColumn).getValues();

  // Buat array JSON
  const jsonData = data.map(row => {
    let obj = {};
    headers.forEach((header, i) => {
      obj[header] = row[i];
    });
    return obj;
  });

  return jsonData;
}

function getSelectedColumns(spreadsheetId, sheetName, headerRow, columns) {
  const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
  if (!sheet) return { error: `Sheet ${sheetName} not found` };

  const lastRow = sheet.getLastRow();

  // Ambil header dari kolom yang dipilih
  const headers = columns.map(col => sheet.getRange(headerRow, col).getValue());

  // Ambil data dari kolom yang dipilih
  const data = columns.map(col => sheet.getRange(headerRow + 1, col, lastRow - headerRow).getValues());

  // Buat array JSON
  const jsonData = [];
  for (let i = 0; i < data[0].length; i++) {
    let obj = {};
    headers.forEach((header, j) => {
      obj[header] = data[j][i][0];
    });
    jsonData.push(obj);
  }

  return jsonData;
}

function verifyLogin(spreadsheetId, sheetName, username, password, row, kolomUser, kolomPass) {
  const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
  if (!sheet) return { error: `Sheet ${sheetName} not found` };

  const lastRow = sheet.getLastRow();
  if (row > lastRow || row < 1) {
    return { error: `Invalid row number. The row should be between 1 and ${lastRow}` };
  }

  // Ambil data username dan password dari baris yang ditentukan
  const usernameValue = sheet.getRange(row, kolomUser).getValue();
  const passwordValue = sheet.getRange(row, kolomPass).getValue();

  // Periksa kecocokan username dan password
  if (username == usernameValue && password == passwordValue) {
    const satu = sheet.getRange(row, 3).getValue();
    const dua = sheet.getRange(row, 4).getValue();
    const tiga = sheet.getRange(row, 5).getValue();
    return { status: "success", message: satu+"#"+dua+"#"+tiga };
  } else {
    return { status: "failed", message: "Username/Password salah" };
  }
}

function writeMeteran(spreadsheetId, sheetName, meteran, bulan, user, row) {
  const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
  if (!sheet) return { error: `Sheet ${sheetName} not found` };

  const lastRow = sheet.getLastRow();
  if (row > lastRow || row < 1) {
    return { error: `Invalid row number. The row should be between 1 and ${lastRow}` };
  }

  // Ambil nilai di kolom 2 pada baris yang diminta
  const userValue = sheet.getRange(row, 2).getValue();

  // Periksa kecocokan nilai user
  if (userValue == user) {
    daftarBulan = [6,7,8,9,10,11,12,13,14,15,16,17,18];
    sheet.getRange(row, daftarBulan[bulan]).setValue(meteran);
    return { status: "success", message: `berhasil` };
  } else {
    return { status: "failed", message: `User ${user} tidak cocok dengan data di kolom 2 pada baris ${row}.` };
  }
}

function writePembayaran(spreadsheetId, sheetName, user, bulan, tanggal, nominal, row) {
  const sheet = SpreadsheetApp.openById(spreadsheetId).getSheetByName(sheetName);
  if (!sheet) return { error: `Sheet ${sheetName} not found` };

  const lastRow = sheet.getLastRow();
  if (row > lastRow || row < 1) {
    return { error: `Invalid row number. The row should be between 1 and ${lastRow}` };
  }

  // Ambil nilai di kolom 2 pada baris yang diminta
  const userValue = sheet.getRange(row, 2).getValue();

  // Periksa kecocokan nilai user
  if (userValue == user) {
    daftarTgl = [6,6,8,10,12,14,16,18,20,22,24,26,28];
    daftarNom = [7,7,9,11,13,15,17,19,21,23,25,27,29];
    sheet.getRange(row, daftarTgl[bulan]).setValue(tanggal);
    sheet.getRange(row, daftarNom[bulan]).setValue(nominal);
    return { status: "success", message: `berhasil` };
  } else {
    return { status: "failed", message: `User ${user} tidak cocok dengan data di kolom 2 pada baris ${row}.` };
  }
}